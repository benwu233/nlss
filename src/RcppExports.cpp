// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Simu_DLSS
NumericMatrix Simu_DLSS(NumericMatrix S, NumericMatrix A, int K);
RcppExport SEXP _nlss_Simu_DLSS(SEXP SSEXP, SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Simu_DLSS(S, A, K));
    return rcpp_result_gen;
END_RCPP
}
// Simu_data_bi
NumericMatrix Simu_data_bi(NumericMatrix X, NumericMatrix mu0, NumericMatrix sd0, NumericVector th);
RcppExport SEXP _nlss_Simu_data_bi(SEXP XSEXP, SEXP mu0SEXP, SEXP sd0SEXP, SEXP thSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sd0(sd0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type th(thSEXP);
    rcpp_result_gen = Rcpp::wrap(Simu_data_bi(X, mu0, sd0, th));
    return rcpp_result_gen;
END_RCPP
}
// DLSS_Deviance_c
double DLSS_Deviance_c(NumericMatrix X, NumericMatrix S, NumericMatrix A, int K);
RcppExport SEXP _nlss_DLSS_Deviance_c(SEXP XSEXP, SEXP SSEXP, SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(DLSS_Deviance_c(X, S, A, K));
    return rcpp_result_gen;
END_RCPP
}
// DLSS_logLik_noisefree
double DLSS_logLik_noisefree(NumericMatrix X, NumericMatrix S, NumericMatrix A, int K);
RcppExport SEXP _nlss_DLSS_logLik_noisefree(SEXP XSEXP, SEXP SSEXP, SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(DLSS_logLik_noisefree(X, S, A, K));
    return rcpp_result_gen;
END_RCPP
}
// DLSS_logLik_noise
double DLSS_logLik_noise(NumericMatrix X, NumericMatrix S, NumericMatrix A, int K);
RcppExport SEXP _nlss_DLSS_logLik_noise(SEXP XSEXP, SEXP SSEXP, SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(DLSS_logLik_noise(X, S, A, K));
    return rcpp_result_gen;
END_RCPP
}
// parallelDLSS_update_Y_n
void parallelDLSS_update_Y_n(NumericVector Y, NumericVector X, NumericVector A, NumericVector S, NumericVector seed, int q, int p, int n, int K);
RcppExport SEXP _nlss_parallelDLSS_update_Y_n(SEXP YSEXP, SEXP XSEXP, SEXP ASEXP, SEXP SSEXP, SEXP seedSEXP, SEXP qSEXP, SEXP pSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    parallelDLSS_update_Y_n(Y, X, A, S, seed, q, p, n, K);
    return R_NilValue;
END_RCPP
}
// parallelDLSS_update_S_n
void parallelDLSS_update_S_n(NumericVector S, NumericVector loglik, NumericVector X, NumericVector A, NumericVector beta, NumericVector u, IntegerVector sampS_star, int q, int p, int K, int n);
RcppExport SEXP _nlss_parallelDLSS_update_S_n(SEXP SSEXP, SEXP loglikSEXP, SEXP XSEXP, SEXP ASEXP, SEXP betaSEXP, SEXP uSEXP, SEXP sampS_starSEXP, SEXP qSEXP, SEXP pSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sampS_star(sampS_starSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    parallelDLSS_update_S_n(S, loglik, X, A, beta, u, sampS_star, q, p, K, n);
    return R_NilValue;
END_RCPP
}
// parallelDLSS_update_A_n
void parallelDLSS_update_A_n(NumericVector A, NumericVector X, NumericVector Y, int alpha_1, int alpha_0, int q, int p, int n, NumericVector seed, NumericVector seed2);
RcppExport SEXP _nlss_parallelDLSS_update_A_n(SEXP ASEXP, SEXP XSEXP, SEXP YSEXP, SEXP alpha_1SEXP, SEXP alpha_0SEXP, SEXP qSEXP, SEXP pSEXP, SEXP nSEXP, SEXP seedSEXP, SEXP seed2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type alpha_1(alpha_1SEXP);
    Rcpp::traits::input_parameter< int >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed2(seed2SEXP);
    parallelDLSS_update_A_n(A, X, Y, alpha_1, alpha_0, q, p, n, seed, seed2);
    return R_NilValue;
END_RCPP
}
// DLSS_gibbs_sampler_n
Rcpp::List DLSS_gibbs_sampler_n(NumericVector X, NumericVector A0, NumericVector gamma, IntegerVector alpha, int total_iter, int burn_in, int show_step);
RcppExport SEXP _nlss_DLSS_gibbs_sampler_n(SEXP XSEXP, SEXP A0SEXP, SEXP gammaSEXP, SEXP alphaSEXP, SEXP total_iterSEXP, SEXP burn_inSEXP, SEXP show_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type total_iter(total_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type show_step(show_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(DLSS_gibbs_sampler_n(X, A0, gamma, alpha, total_iter, burn_in, show_step));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nlss_Simu_DLSS", (DL_FUNC) &_nlss_Simu_DLSS, 3},
    {"_nlss_Simu_data_bi", (DL_FUNC) &_nlss_Simu_data_bi, 4},
    {"_nlss_DLSS_Deviance_c", (DL_FUNC) &_nlss_DLSS_Deviance_c, 4},
    {"_nlss_DLSS_logLik_noisefree", (DL_FUNC) &_nlss_DLSS_logLik_noisefree, 4},
    {"_nlss_DLSS_logLik_noise", (DL_FUNC) &_nlss_DLSS_logLik_noise, 4},
    {"_nlss_parallelDLSS_update_Y_n", (DL_FUNC) &_nlss_parallelDLSS_update_Y_n, 9},
    {"_nlss_parallelDLSS_update_S_n", (DL_FUNC) &_nlss_parallelDLSS_update_S_n, 11},
    {"_nlss_parallelDLSS_update_A_n", (DL_FUNC) &_nlss_parallelDLSS_update_A_n, 10},
    {"_nlss_DLSS_gibbs_sampler_n", (DL_FUNC) &_nlss_DLSS_gibbs_sampler_n, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_nlss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
