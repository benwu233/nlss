// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_S_seprt
void update_S_seprt(NumericVector S, NumericVector X, NumericVector A, NumericVector beta, IntegerVector group, int q, int p, int K, int G, int n);
RcppExport SEXP _nlss_update_S_seprt(SEXP SSEXP, SEXP XSEXP, SEXP ASEXP, SEXP betaSEXP, SEXP groupSEXP, SEXP qSEXP, SEXP pSEXP, SEXP KSEXP, SEXP GSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    update_S_seprt(S, X, A, beta, group, q, p, K, G, n);
    return R_NilValue;
END_RCPP
}
// sum_subset2
Rcpp::List sum_subset2(NumericMatrix a, int q, int n, int nonzero);
RcppExport SEXP _nlss_sum_subset2(SEXP aSEXP, SEXP qSEXP, SEXP nSEXP, SEXP nonzeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nonzero(nonzeroSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_subset2(a, q, n, nonzero));
    return rcpp_result_gen;
END_RCPP
}
// sum_subset3
Rcpp::NumericMatrix sum_subset3(NumericMatrix a, int q, int n, int nonzero);
RcppExport SEXP _nlss_sum_subset3(SEXP aSEXP, SEXP qSEXP, SEXP nSEXP, SEXP nonzeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nonzero(nonzeroSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_subset3(a, q, n, nonzero));
    return rcpp_result_gen;
END_RCPP
}
// update_S_joint
void update_S_joint(NumericVector S, NumericVector X, NumericMatrix A, int q, int p, int K, int n, NumericMatrix Sspace, NumericVector states, NumericMatrix stat_link, int ns, int q0);
RcppExport SEXP _nlss_update_S_joint(SEXP SSEXP, SEXP XSEXP, SEXP ASEXP, SEXP qSEXP, SEXP pSEXP, SEXP KSEXP, SEXP nSEXP, SEXP SspaceSEXP, SEXP statesSEXP, SEXP stat_linkSEXP, SEXP nsSEXP, SEXP q0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Sspace(SspaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type states(statesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stat_link(stat_linkSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type q0(q0SEXP);
    update_S_joint(S, X, A, q, p, K, n, Sspace, states, stat_link, ns, q0);
    return R_NilValue;
END_RCPP
}
// findmode_S
void findmode_S(NumericVector S, NumericVector X, NumericVector A, NumericVector beta, IntegerVector group, int q, int p, int K, int G, int n);
RcppExport SEXP _nlss_findmode_S(SEXP SSEXP, SEXP XSEXP, SEXP ASEXP, SEXP betaSEXP, SEXP groupSEXP, SEXP qSEXP, SEXP pSEXP, SEXP KSEXP, SEXP GSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    findmode_S(S, X, A, beta, group, q, p, K, G, n);
    return R_NilValue;
END_RCPP
}
// update_A
void update_A(NumericVector A, NumericVector X, NumericVector Y, double alpha_1, double alpha_0, int q, int p, int n, NumericVector seed, NumericVector seed2);
RcppExport SEXP _nlss_update_A(SEXP ASEXP, SEXP XSEXP, SEXP YSEXP, SEXP alpha_1SEXP, SEXP alpha_0SEXP, SEXP qSEXP, SEXP pSEXP, SEXP nSEXP, SEXP seedSEXP, SEXP seed2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_1(alpha_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed2(seed2SEXP);
    update_A(A, X, Y, alpha_1, alpha_0, q, p, n, seed, seed2);
    return R_NilValue;
END_RCPP
}
// update_Y
void update_Y(NumericVector Y, NumericVector X, NumericVector A, NumericVector S, NumericVector seed, int q, int p, int n, int K);
RcppExport SEXP _nlss_update_Y(SEXP YSEXP, SEXP XSEXP, SEXP ASEXP, SEXP SSEXP, SEXP seedSEXP, SEXP qSEXP, SEXP pSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    update_Y(Y, X, A, S, seed, q, p, n, K);
    return R_NilValue;
END_RCPP
}
// NLSS_gibbs_sampler
Rcpp::List NLSS_gibbs_sampler(NumericVector X, NumericVector A0, NumericVector S0, NumericVector Y0, NumericMatrix stat_link, int joint, NumericVector alpha, NumericMatrix Sspace, NumericVector states, int q0, int K, int total_iter, int burn_in, int thin, int show_step);
RcppExport SEXP _nlss_NLSS_gibbs_sampler(SEXP XSEXP, SEXP A0SEXP, SEXP S0SEXP, SEXP Y0SEXP, SEXP stat_linkSEXP, SEXP jointSEXP, SEXP alphaSEXP, SEXP SspaceSEXP, SEXP statesSEXP, SEXP q0SEXP, SEXP KSEXP, SEXP total_iterSEXP, SEXP burn_inSEXP, SEXP thinSEXP, SEXP show_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y0(Y0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stat_link(stat_linkSEXP);
    Rcpp::traits::input_parameter< int >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Sspace(SspaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type states(statesSEXP);
    Rcpp::traits::input_parameter< int >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type total_iter(total_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type show_step(show_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(NLSS_gibbs_sampler(X, A0, S0, Y0, stat_link, joint, alpha, Sspace, states, q0, K, total_iter, burn_in, thin, show_step));
    return rcpp_result_gen;
END_RCPP
}
// simNLSS
NumericMatrix simNLSS(NumericMatrix S, NumericMatrix A, int K);
RcppExport SEXP _nlss_simNLSS(SEXP SSEXP, SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(simNLSS(S, A, K));
    return rcpp_result_gen;
END_RCPP
}
// NLSS_logLik_noise0
double NLSS_logLik_noise0(NumericMatrix X, NumericMatrix S, NumericMatrix A, int K);
RcppExport SEXP _nlss_NLSS_logLik_noise0(SEXP XSEXP, SEXP SSEXP, SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(NLSS_logLik_noise0(X, S, A, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nlss_update_S_seprt", (DL_FUNC) &_nlss_update_S_seprt, 10},
    {"_nlss_sum_subset2", (DL_FUNC) &_nlss_sum_subset2, 4},
    {"_nlss_sum_subset3", (DL_FUNC) &_nlss_sum_subset3, 4},
    {"_nlss_update_S_joint", (DL_FUNC) &_nlss_update_S_joint, 12},
    {"_nlss_findmode_S", (DL_FUNC) &_nlss_findmode_S, 10},
    {"_nlss_update_A", (DL_FUNC) &_nlss_update_A, 10},
    {"_nlss_update_Y", (DL_FUNC) &_nlss_update_Y, 9},
    {"_nlss_NLSS_gibbs_sampler", (DL_FUNC) &_nlss_NLSS_gibbs_sampler, 15},
    {"_nlss_simNLSS", (DL_FUNC) &_nlss_simNLSS, 3},
    {"_nlss_NLSS_logLik_noise0", (DL_FUNC) &_nlss_NLSS_logLik_noise0, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_nlss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
