k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
if(sum(bag_0,na.rm=TRUE)==0){
print(paste(i,j,k))
#break
bag_0[which(b_0!=0)] = bag_num
bag_num = bag_num + 1
}
else{
bag_0[which(b_0!=0)] = bag_0[which(b_0!=0)[1]]
}
bag[i0:i1,j0:j1,k0:k1] = bag_0
}
}
}
}
}
i=47
j=51
k=21
if(i==1){
i0 = 1
i1 = i + 1
}else if(i==61){
i0 = i - 1
i1 = 61
}else{
i0 = i - 1
i1 = i + 1
}
if(j==1){
j0 = 1
j1 = j + 1
}else if(j==73){
j0 = j - 1
j1 = 73
}else{
j0 = j - 1
j1 = j + 1
}
if(k==1){
k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
bag_0
i0
j0
k0
i=47
j=51
k=23
if(i==1){
i0 = 1
i1 = i + 1
}else if(i==61){
i0 = i - 1
i1 = 61
}else{
i0 = i - 1
i1 = i + 1
}
if(j==1){
j0 = 1
j1 = j + 1
}else if(j==73){
j0 = j - 1
j1 = 73
}else{
j0 = j - 1
j1 = j + 1
}
if(k==1){
k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
bag_0
for(i in 1:61){
for(j in 1:73){
for(k in 1:61){
if(!is.na(btmp[i,j,k])){
if(btmp[i,j,k]!=0){
if(i==1){
i0 = 1
i1 = i + 1
}else if(i==61){
i0 = i - 1
i1 = 61
}else{
i0 = i - 1
i1 = i + 1
}
if(j==1){
j0 = 1
j1 = j + 1
}else if(j==73){
j0 = j - 1
j1 = 73
}else{
j0 = j - 1
j1 = j + 1
}
if(k==1){
k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
if(sum(bag_0,na.rm=TRUE)==0){
print(paste(i,j,k))
#break
bag_0[which(b_0!=0)] = bag_num
bag_num = bag_num + 1
}
else{
bag_0[which(b_0!=0)] = bag_0[which(b_0!=0)[1]]
}
bag[i0:i1,j0:j1,k0:k1] = bag_0
}
}
}
}
}
i=2
tmp = prob[[i]]
b_tmp = b[[i]]
th = quantile(tmp,0.99,na.rm=TRUE)
btmp = b_tmp*(tmp>=th)
bag = array(0,c(61,73,61))
bag_num = 1
for(i in 1:61){
for(j in 1:73){
for(k in 1:61){
if(!is.na(btmp[i,j,k])){
if(btmp[i,j,k]!=0){
if(i==1){
i0 = 1
i1 = i + 1
}else if(i==61){
i0 = i - 1
i1 = 61
}else{
i0 = i - 1
i1 = i + 1
}
if(j==1){
j0 = 1
j1 = j + 1
}else if(j==73){
j0 = j - 1
j1 = 73
}else{
j0 = j - 1
j1 = j + 1
}
if(k==1){
k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
if(sum(bag_0,na.rm=TRUE)==0){
print(paste(i,j,k))
#break
bag_0[which(b_0!=0)] = bag_num
bag_num = bag_num + 1
}
else{
tag = 0
for(q in which(b_0!=0)){
if(bag_0[q]!=0){
tag = bag_0[q]
}
break
}
bag_0[which(b_0!=0)] = tag
}
bag[i0:i1,j0:j1,k0:k1] = bag_0
}
}
}
}
}
table(bag)
for(i in 1:61){
for(j in 1:73){
for(k in 1:61){
if(!is.na(btmp[i,j,k])){
if(btmp[i,j,k]!=0){
if(i==1){
i0 = 1
i1 = i + 1
}else if(i==61){
i0 = i - 1
i1 = 61
}else{
i0 = i - 1
i1 = i + 1
}
if(j==1){
j0 = 1
j1 = j + 1
}else if(j==73){
j0 = j - 1
j1 = 73
}else{
j0 = j - 1
j1 = j + 1
}
if(k==1){
k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
if(sum(bag_0,na.rm=TRUE)==0){
print(paste(i,j,k))
#break
bag_0[which(b_0!=0)] = bag_num
bag_num = bag_num + 1
}
else{
tag = 0
for(q in which(b_0!=0)){
if(bag_0[q]!=0){
tag = bag_0[q]
}
break
}
bag_0[which(b_0!=0)] = tag
}
bag[i0:i1,j0:j1,k0:k1] = bag_0
}
}
}
}
}
tag
i=2
tmp = prob[[i]]
b_tmp = b[[i]]
th = quantile(tmp,0.99,na.rm=TRUE)
btmp = b_tmp*(tmp>=th)
bag = array(0,c(61,73,61))
bag_num = 1
for(i in 1:61){
for(j in 1:73){
for(k in 1:61){
if(!is.na(btmp[i,j,k])){
if(btmp[i,j,k]!=0){
if(i==1){
i0 = 1
i1 = i + 1
}else if(i==61){
i0 = i - 1
i1 = 61
}else{
i0 = i - 1
i1 = i + 1
}
if(j==1){
j0 = 1
j1 = j + 1
}else if(j==73){
j0 = j - 1
j1 = 73
}else{
j0 = j - 1
j1 = j + 1
}
if(k==1){
k0 = 1
k1 = k + 1
}else if(k==61){
k0 = k - 1
k1 = 61
}else{
k0 = k - 1
k1 = k + 1
}
b_0 = btmp[i0:i1,j0:j1,k0:k1]
bag_0 = bag[i0:i1,j0:j1,k0:k1]
if(sum(bag_0,na.rm=TRUE)==0){
#print(paste(i,j,k))
#break
bag_0[which(b_0!=0)] = bag_num
bag_num = bag_num + 1
}
else{
tag = 0
for(q in which(b_0!=0)){
if(bag_0[q]!=0){
tag = bag_0[q]
}
break
}
bag_0[which(b_0!=0)] = tag
}
bag[i0:i1,j0:j1,k0:k1] = bag_0
}
}
}
}
}
table(bag)
install.packages(c("ggplot2", "reshape", "rlang", "igraph"))
install.packages(c("ggplot2", "reshape", "rlang", "igraph"))
?find_image_neighbors
devtools::install_github("kangjian2016/SpatCorrImage")
install.packages("jpeg")
library(jpeg)
list.files(path = "/Users/ben/desktop/after/1")
############### PNC data  ###################
library(gplots)
library(nlss)
library(gtools)
library(abind)
#################
"12 Dorsal attention"
"11 Ventral attention"
"3 Cingulo-opercular Task Control"
"8 Fronto-parietal Task Control"
"9 Salience"
"6 Memory retrieval"
"5 Default mode"
"10 Subcortical"
"13 Cerebellar"
"7 Visual"
"4 Auditory"
"1 Sensory/somatomotor Hand"
"2 Sensory/somatomotor Mouth"
source("/Users/Ben/Desktop/Rpackage/nlss_function.R")
group0 = read.csv("/Users/ben/Desktop/work2/data/PNC/roi_id_power.csv")
group = group0
order0 = c(12,11,3,8,9,6,5,10,13,7,4,1,2)
for(i in 1:13){
group$network_id[group$network_id==order0[i]] = i+ 100
}
group$network_id[group$network_id!=-1] = group$network_id[group$network_id!=-1] - 100
group_1 = group$network_id
group_2 = group_1[order(group_1)][-c(1:28)]
FC_data_85 = readRDS(file = "/Users/ben/Desktop/work2/nlss/FC_data_new_power236_ordered_248s.rds")
test= readRDS("/Users/ben/desktop/test/test.rds")
res6 = readRDS("/Users/ben/desktop/test/simres6.rds")
init0 = list()
init0$S = res6$S[,,3000]
init0$A = res6$A[,,3000]
init0$beta = res6$beta[,,3000]
dim(res6$beta[,,3000]
)
dim(res6$A[,,3000])
res62 = NLSS(data=simX,init=init0, q=6, kk = 1, group_node = group_2,
total_iter = 3000, burn_in = 0, thin = 1, show_step=100)
test= readRDS("/Users/ben/desktop/test/test.rds")
res62 = NLSS(data=test$simX,init=init0, q=6, kk = 1, group_node = group_2,
total_iter = 3000, burn_in = 0, thin = 1, show_step=100)
loglik0 = log_lik_A(test$simX,res,1,3000,3)
loglik1 = log_lik_A(test$simX,res6,1,3000,3)
loglik11 = log_lik_A(test$simX,res62,1,3000,3)
res = readRDS("/Users/ben/desktop/test/simres8.rds")
loglik0 = log_lik_A(test$simX,res,1,3000,3)
init0 = list()
init0$S = res$S[,,3000]
init0$A = res$A[,,3000]
init0$beta = res$beta[,,3000]
res2 = NLSS(data=test$simX,init=init0, q=8, kk = 1, group_node = group_2,
total_iter = 3000, burn_in = 0, thin = 1, show_step=100)
loglik00 = log_lik_A(test$simX,res2,1,3000,3)
plot(c(loglik0,loglik00) )
plot(c(loglik00) )
plot(c(loglik0,
loglik00) )
plot(c(loglik1,
loglik11) )
plot(c(loglik11) )
plot(c(loglik0[2000:3000] ) )
dim(res$A)
logliktrue = log_lik_A0(test$simX,test$S,test$A,3)
logliktrue
plot(c(loglik0,loglik00))
lines(logliktrue)
lines(logliktrue,col="red")
plot(c(loglik00))
init0 = list()
init0$S = res2$S[,,3000]
init0$A = res2$A[,,3000]
init0$beta = res2$beta[,,3000]
res3 = NLSS(data=test$simX,init=init0, q=8, kk = 1, group_node = group_2,
total_iter = 3000, burn_in = 0, thin = 1, show_step=100)
loglik01 = log_lik_A(test$simX,res3,1,3000,3)
plot(loglik01)
max
max(loglik01)
max(loglik01) - logliktrue
min(loglik01) - logliktrue
saveRDS(res2,"/Users/ben/desktop/test/simres8_2.rds")
saveRDS(res3,"/Users/ben/desktop/test/simres8_3.rds")
init0 = list()
init0$S = res3$S[,,3000]
init0$A = res3$A[,,3000]
init0$beta = res3$beta[,,3000]
res4 = NLSS(data=test$simX,init=init0, q=8, kk = 1, group_node = group_2,
total_iter = 3000, burn_in = 0, thin = 1, show_step=100)
loglik02 = log_lik_A(test$simX,res4,1,3000,3)
plot(c(loglik0,loglik00,loglik01,loglik02))
min(c(loglik0,loglik00,loglik01,loglik02))
max(c(loglik0,loglik00,loglik01,loglik02))
logliktrue
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4730000,-4440000))
lines(logliktrue)
lines(rep(logliktrue,12000) )
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4550000,-4440000))
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4450000,-4440000))
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4550000,-4440000))
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4480000,-4440000))
lines(rep(logliktrue,12000) )
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4460000,-4440000))
lines(rep(logliktrue,12000) )
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4460000,-4440000))
lines(rep(logliktrue,12000),col="red" )
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4465000,-4440000))
lines(rep(logliktrue,12000),col="red" )
plot(loglik02)
plot(c(loglik0,loglik00,loglik01,loglik02),ylim= c(-4465000,-4440000))
lines(rep(logliktrue,12000),col="red" )
init0 = list()
init0$S = test$S
init0$A = test$A
init0$beta = res3$beta[,,3000]
init0 = list()
init0$S = test$S
init0$A = test$A
init0$beta = res3$beta[,,3000]
res5 = NLSS(data=test$simX,init=init0, q=8, kk = 1, group_node = group_2,
total_iter = 1000, burn_in = 0, thin = 10, show_step=100)
loglik03 = log_lik_A(test$simX,res5,1,1000,3)
loglik03 = log_lik_A(test$simX,res5,1,100,3)
plot(loglik03,ylim= c(-4465000,-4440000))
lines(rep(logliktrue,100),col="red" )
############### PNC data  ###################
library(gplots)
library(nlss)
library(gtools)
library(abind)
#################
"12 Dorsal attention"
"11 Ventral attention"
"3 Cingulo-opercular Task Control"
"8 Fronto-parietal Task Control"
"9 Salience"
"6 Memory retrieval"
"5 Default mode"
"10 Subcortical"
"13 Cerebellar"
"7 Visual"
"4 Auditory"
"1 Sensory/somatomotor Hand"
"2 Sensory/somatomotor Mouth"
source("/Users/Ben/Desktop/Rpackage/nlss_function.R")
group0 = read.csv("/Users/ben/Desktop/work2/data/PNC/roi_id_power.csv")
group = group0
order0 = c(12,11,3,8,9,6,5,10,13,7,4,1,2)
for(i in 1:13){
group$network_id[group$network_id==order0[i]] = i+ 100
}
group$network_id[group$network_id!=-1] = group$network_id[group$network_id!=-1] - 100
group_1 = group$network_id
group_2 = group_1[order(group_1)][-c(1:28)]
FC_data_85 = readRDS(file = "/Users/ben/Desktop/work2/nlss/FC_data_new_power236_ordered_248s.rds")
library(nlss)
